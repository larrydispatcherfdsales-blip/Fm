name: FMCSA Extractor Main Workflow

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of MCs per batch'
        required: true
        default: '250'
      concurrency:
        description: 'Parallel requests for the extractor script'
        required: true
        default: '4'

jobs:
  # === JOB 1: Batches ki list tayyar karna ===
  prepare-batches:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Calculate total number of batches
        id: set-matrix
        run: |
          BATCH_SIZE=${{ github.event.inputs.batch_size }}
          TOTAL_LINES=$(wc -l < mc_list.txt)
          BATCH_COUNT=$(( (TOTAL_LINES + BATCH_SIZE - 1) / BATCH_SIZE ))
          echo "Total MCs: $TOTAL_LINES, Batch Size: $BATCH_SIZE, Total Batches: $BATCH_COUNT"
          # Yeh line ek JSON array banati hai [0, 1, 2, ...]
          MATRIX_JSON=$(jq -c -n --argjson count "$BATCH_COUNT" '[range($count)]')
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  # === JOB 2: Har batch ko parallel mein extract karna ===
  run-extraction:
    runs-on: ubuntu-latest
    needs: prepare-batches
    strategy:
      matrix:
        batch_index: ${{ fromJson(needs.prepare-batches.outputs.matrix) }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Create batch.txt for this job
        run: |
          START_LINE=$(( ${{ matrix.batch_index }} * ${{ github.event.inputs.batch_size }} + 1 ))
          BATCH_SIZE=${{ github.event.inputs.batch_size }}
          tail -n +$START_LINE mc_list.txt | head -n $BATCH_SIZE > batch.txt
          echo "✅ Created batch.txt for index ${{ matrix.batch_index }} with $(wc -l < batch.txt) lines."

      - name: Run the extractor script
        env:
          CONCURRENCY: ${{ github.event.inputs.concurrency }}
          BATCH_INDEX: ${{ matrix.batch_index }}
        run: |
          mkdir -p output
          node extractor.js

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmcsa-output-batch-${{ matrix.batch_index }}
          path: output/*.csv
          if-no-files-found: ignore
          retention-days: 1

  # === JOB 3: Saare results ko merge karna ===
  merge-and-commit:
    runs-on: ubuntu-latest
    # Yeh job tab chalega jab 'run-extraction' ke saare matrix jobs complete ho jayenge
    needs: run-extraction
    steps:
      - name: Checkout repository to commit to
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: pip install pandas

      - name: Download all artifacts from this workflow run
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge all downloaded CSVs
        id: merge_csv
        run: |
          python - <<'EOF'
          import os, glob, pandas as pd
          path = "artifacts"
          csv_files = glob.glob(os.path.join(path, "**", "*.csv"), recursive=True)
          if not csv_files:
              print("⚠️ No CSV files found to merge.")
              exit(1)
          print(f"Found {len(csv_files)} CSV files to merge.")
          all_dfs = [pd.read_csv(f, on_bad_lines='skip') for f in csv_files if os.path.getsize(f) > 0]
          if not all_dfs:
              print("⚠️ All CSV files were empty or corrupt.")
              exit(1)
          final_df = pd.concat(all_dfs, ignore_index=True)
          final_df.drop_duplicates(subset=['mcNumber', 'email'], keep='first', inplace=True)
          output_path = "output/merged_fmcsa_data.csv"
          os.makedirs("output", exist_ok=True)
          final_df.to_csv(output_path, index=False)
          print(f"✅ Successfully created merged file at '{output_path}' with {len(final_df)} rows.")
          EOF

      - name: Commit and push the merged data file
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output/merged_fmcsa_data.csv
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: Update merged FMCSA data"
            git push
          fi
